/*
Как строиться css
СЕЛЕКТОР{
СВОЙСТВО:ЗНАЧЕНИЕ;
СВОЙСТВО:ЗНАЧЕНИЕ;
СВОЙСТВО:ЗНАЧЕНИЕ;
}
------------------------------------------------Селекторы и Комбинаторы------------------------------------------------
Селекторы:
    1. По типу элемента: input, span,div
    2. По классу: .class__name
    3. По идентификатору:#id_name
    4. Универсальный:*
    5. По атрибуту:
        5.1. [атрибут="A"]: состоит из A
        5.2. [атрибут$="A"]: оканчивается на A
        5.3. [атрибут*="A"]: содержит A
        5.4. [атрибут^="A"]: начинается с A
        5.5. [атрибут|="A"]: содержит A в слове с дефисом(-)
        5.6. [атрибут~="A"]: содержит A в слове с пробелом
Комбинаторы:
    1. Запятая: А, В
    2. Пробел: А В
Комбинатор потомков (пробел) - этот комбинатор выбирает все элементы, которые являются потомками определенного элемента.
    3. Дочерние: А > В
Дочерний комбинатор (>) - этот комбинатор выбирает элементы, которые являются непосредственными дочерними элементами
определенного элемента.
    4. Все соседние элементы: А ~ В
Общий соседний комбинатор (~) - этот комбинатор выбирает все элементы, которые являются соседними элементами
(находятся на одном уровне вложенности) после определенного элемента.
 CSS символ ~ используется как комбинатор соседних элементов общего родителя. Он позволяет выбирать элементы, которые
 имеют общего родителя и находятся после указанного элемента, но не обязательно непосредственно после него.
    5. Следующий соседний элемент: А + В
Смежный комбинатор (+) - этот комбинатор выбирает(один) элемент, который является непосредственным соседом (следующим)
определенного элемента.
В CSS символ + используется как комбинатор смежных соседей. Он позволяет выбирать элемент, который следует сразу за
указанным элементом и находится на одном уровне в иерархии DOM (имеет общего родителя).

---------------------------------------------Псевдоклассы и Псевдоэлементы---------------------------------------------

Псевдокласс в CSS — это ключевое слово, добавленное к селектору, которое определяет его особое состояние.
	Псевдоклассы:
		1. :active-> Когда пользователь нажимает на элемент.
		2. :hover-> Когда указатель мыши находится над элементом.
		3. :focus->При навигации с помощью клавиатуры или клике на элемент.
		4. :first-child-> Этот псевдокласс применяется к первому дочернему элементу родителя.
		5. :last-child->Этот псевдокласс применяется к последнему дочернему элементу родителя
		6. :nth-child(n/odd/even)->Этот псевдокласс применяется к элементам на основе их позиции в группе братских элементов.
		7. :nth-of-type(n)->Этот псевдокласс работает аналогично :nth-child, но учитывает только элементы определенного типа.
		7. :required->то есть обязательные для заполнения,
		    :checked->Этот псевдокласс применяется к элементам типа чекбоксов или радиокнопок, которые выбраны (отмечены),
		    :disabled-> Этот псевдокласс применяется к элементам, которые отключены (неактивны).
		8. :not()->Этот псевдокласс выбирает элементы, которые не соответствуют указанному селектору.

Псевдоэлемент в CSS — это ключевое слово, добавляемое к селектору, которое позволяет стилизовать определённую часть
выбранного элемента. Псевдоэлементобязательно должен содержать content: '' и display: inline-block;

	Псевдоэлементы:
		1. ::before
		Псевдоэлемент before вставляет текст перед элементом. Используется только совместно со свойством content,
		которое задает текст, который следует вставить. И display: inline-block; который говорит что объект должен иметь
		область видимости
		2. ::after
		3. ::placeholder

--------------------------------------------- Позиционирование(position) ---------------------------------------------

	position: static/relative/absolute/fixed;
	top, left, right, bottom
	В CSS свойства position и top, left, right, bottom используются для управления расположением элементов на веб-странице.
	1. position: static - значение по умолчанию. Элементы с position: static расположены в нормальном потоке документа.
	Свойства top, left, right, bottom для них не применяются.
	2. position: relative - элемент с position: relative располагается относительно своего обычного положения. Свойства
	top, left, right, bottom смещают элемент относительно его нормального положения.
	3. position: absolute - элемент с position: absolute позиционируется относительно ближайшего предка с position: relative,
	position: absolute или position: fixed. Если такого предка нет, то относительно начального контекста (обычно это <html>).
	4. position: fixed - элемент с position: fixed позиционируется относительно окна браузера и остается на месте даже
	при прокрутке страницы.

--------------------------------------------- background ---------------------------------------------

    0.Запись в одну строку
    background: #eee url('./cat.ico') no-repeat center center/contain;*!
    #eee->Устанавливает цвет фона элемента
    url('./cat.ico')->Устанавливает фоновое изображение, находящееся по указанному пути
    no-repeat->Указывает, что фоновое изображение не должно повторяться.
    center center->Центрирует фоновое изображение по горизонтали и вертикали внутри элемента.
    contain->Масштабирует фоновое изображение так, чтобы оно полностью поместилось внутри элемента, сохраняя свои пропорции.

	1.background
	Универсальное свойство background позволяет установить одновременно несколько характеристик фона.

	2.background-attachment: fixed, scroll
	Свойство background-attachment устанавливает, будет ли прокручиваться фоновое изображение вместе с содержимым элемента.

	3.background-image,
	Устанавливает фоновое изображение для элемента.

	4.background-origin: https://webref.ru/css/background-origin
	Свойство background-origin определяет область позиционирования фонового рисунка.

	5.background-repeat: repeat-x, repeat-y, no-repeat, space,
	Определяет, как будет повторяться фоновое изображение.

	6.background-size: cover, contain, %, px
	Масштабирует фоновое изображение, согласно заданным размерам.
	cover - масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.
	(будет растягивать картинку пока картинка не достигнет обе границы и будет сильно увеличивать изображение)
	contain - масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь
	блока(будет растягивать картинку пока картинка не достигнет размера какой-то границы).

	7.background-position: center center
	Задаёт начальное положение фонового изображения. Порядок не имеет значения(сначало по x потом по y),
	можно писать top,bottom, left, right, center

	8.background:linear-gradient(to top, #fefcea, #f1da36)
	Стилевая функция linear-gradient() добавляет линейный градиент к фону элемента. Она выступает значением свойства
	background-image или background.
*/

/*Селектор по типу элемента*/
body {
    font-size: 46px;
    margin: 0;
    height: 1500px;
    font-size: 56px;
    font-weight: bold;
    color: green;
}


/*------------------------------------position: fixed top left------------------------------------*/

/*
.test1{
    height: 1000px;
    !*background: #eee url('./cat.ico') no-repeat center center/contain;*!
    #eee->Устанавливает цвет фона элемента
    url('./cat.ico')->Устанавливает фоновое изображение, находящееся по указанному пути
    no-repeat->Указывает, что фоновое изображение не должно повторяться.
    center center->Центрирует фоновое изображение по горизонтали и вертикали внутри элемента.
    contain->Масштабирует фоновое изображение так, чтобы оно полностью поместилось внутри элемента, сохраняя свои пропорции.
    background: #eee;
    !*background: url("./cat.ico");*!
    background-image: url('./cat.ico');
    background-repeat: repeat;
    background-position: center;
    background-attachment: fixed;
}

.test2{
    margin-top: 50px;
    height: 300px;
    !*background: #eee;*!
    !*background: url("./cat.ico");*!
    background-image: url('./cat.ico');
    background-repeat: space;
}
*/
.test1 {
    height: 500px;
    /*
    background: #eee;
    background-image: url('./1.jpg');
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    */
    background: #eee url('./1.jpg') no-repeat center center/cover;
}
/*
.test1 {
    height: 500px;
    background:linear-gradient(to top, #fefcea, #f1da36)}
*/
/*
.test2 {
    height: 500px;
    background:linear-gradient(to left, red, blue)}
*/
.test2 {
    height: 500px;
    background: rgb(63,94,251);
    background: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);}























































































































