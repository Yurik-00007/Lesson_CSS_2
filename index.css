/*
Как строиться css
СЕЛЕКТОР{
СВОЙСТВО:ЗНАЧЕНИЕ;
СВОЙСТВО:ЗНАЧЕНИЕ;
СВОЙСТВО:ЗНАЧЕНИЕ;
}
------------------------------------------------Селекторы и Комбинаторы------------------------------------------------
Селекторы:
    1. По типу элемента: input, span,div
    2. По классу: .class__name
    3. По идентификатору:#id_name
    4. Универсальный:*
    5. По атрибуту:
        5.1. [атрибут="A"]: состоит из A
        5.2. [атрибут$="A"]: оканчивается на A
        5.3. [атрибут*="A"]: содержит A
        5.4. [атрибут^="A"]: начинается с A
        5.5. [атрибут|="A"]: содержит A в слове с дефисом(-)
        5.6. [атрибут~="A"]: содержит A в слове с пробелом
Комбинаторы:
    1. Запятая: А, В
    2. Пробел: А В
Комбинатор потомков (пробел) - этот комбинатор выбирает все элементы, которые являются потомками определенного элемента.
    3. Дочерние: А > В
Дочерний комбинатор (>) - этот комбинатор выбирает элементы, которые являются непосредственными дочерними элементами
определенного элемента.
    4. Все соседние элементы: А ~ В
Общий соседний комбинатор (~) - этот комбинатор выбирает все элементы, которые являются соседними элементами
(находятся на одном уровне вложенности) после определенного элемента.
 CSS символ ~ используется как комбинатор соседних элементов общего родителя. Он позволяет выбирать элементы, которые
 имеют общего родителя и находятся после указанного элемента, но не обязательно непосредственно после него.
    5. Следующий соседний элемент: А + В
Смежный комбинатор (+) - этот комбинатор выбирает(один) элемент, который является непосредственным соседом (следующим)
определенного элемента.
В CSS символ + используется как комбинатор смежных соседей. Он позволяет выбирать элемент, который следует сразу за
указанным элементом и находится на одном уровне в иерархии DOM (имеет общего родителя).

---------------------------------------------Псевдоклассы и Псевдоэлементы---------------------------------------------

Псевдокласс в CSS — это ключевое слово, добавленное к селектору, которое определяет его особое состояние.
	Псевдоклассы:
		1. :active-> Когда пользователь нажимает на элемент.
		2. :hover-> Когда указатель мыши находится над элементом.
		3. :focus->При навигации с помощью клавиатуры или клике на элемент.
		4. :first-child-> Этот псевдокласс применяется к первому дочернему элементу родителя.
		5. :last-child->Этот псевдокласс применяется к последнему дочернему элементу родителя
		6. :nth-child(n/odd/even)->Этот псевдокласс применяется к элементам на основе их позиции в группе братских элементов.
		7. :nth-of-type(n)->Этот псевдокласс работает аналогично :nth-child, но учитывает только элементы определенного типа.
		7. :required->то есть обязательные для заполнения,
		    :checked->Этот псевдокласс применяется к элементам типа чекбоксов или радиокнопок, которые выбраны (отмечены),
		    :disabled-> Этот псевдокласс применяется к элементам, которые отключены (неактивны).
		8. :not()->Этот псевдокласс выбирает элементы, которые не соответствуют указанному селектору.

Псевдоэлемент в CSS — это ключевое слово, добавляемое к селектору, которое позволяет стилизовать определённую часть
выбранного элемента. Псевдоэлементобязательно должен содержать content: '' и display: inline-block;

	Псевдоэлементы:
		1. ::before
		Псевдоэлемент before вставляет текст перед элементом. Используется только совместно со свойством content,
		которое задает текст, который следует вставить. И display: inline-block; который говорит что объект должен иметь
		область видимости
		2. ::after
		3. ::placeholder


*/

/*Селектор по типу элемента*/
body {
    font-size: 46px;
    margin: 0;
    height: 1500px;
}

.container{
width: 50%;
    background-color: #999;
}

.block_1,
.block_2,
.block_3
{
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100px;
    height: 100px;
    color: black;
    font-size: 35px;
}
/*------------------------------------position: fixed top left------------------------------------*/
/* Вырывает элемент из контекста он начинает как будто парит и будет находиться на том же месте даже при прокрутке.
Другие блоки займут его место.*/
/*
.block_1{
    background-color: #cc0000;
    position: fixed;
    top: 100px;
    left: 100px;
}
.block_2{
    background-color:greenyellow;
    position: fixed;
    top:200px;
    bottom: 0;
    right: 100px;
}
.block_3{
    background-color: #f6f676;
    position: fixed;
    top:300px;
    bottom: 0;
    right: 200px;
}
*/

/*
.block_1{
    background-color: #d05454;
    position: fixed;
    top: 300px;
}
.block_2{
    background-color:greenyellow;
}
.block_3{
    background-color: #f6f676;
}
*/
/*------------------------------------position: absolute------------------------------------*/
/* Вырывает элемент из контекста он начинает как будто парит и будет находиться на одном месте, но при прокрутке будет
прокручен. Другие блоки займут его место.*/

/*
.block_1{
    background-color: #d05454;
    position: absolute;
    top: 300px;
    left: 300px;
}
.block_2{
    background-color:greenyellow;
}
.block_3{
    background-color: #f6f676;
}
*/

/*------------------------------------position: relative------------------------------------*/
/* Элемент будет находиться на относительно своего обычного положения, о его существование будут знать другие элементы.
 И у него все равно останется свойство top,left,bottom и right. Если применить ему свойства top,left,bottom и right
 элемент будет перемещен, но его место ни кто из других элементов не займет*/

/*
.block_1{
    background-color: #d05454;
    position: relative;
    top: 300px;
    left: 300px;
}
.block_2{
    background-color:greenyellow;
}
.block_3{
    background-color: #f6f676;
}
*/
/*------------------------------------Пример------------------------------------*/

.block_1{
    background-color: #d05454;
    position: relative;
    right: 5px;
    top: 20px;
}
.block_2{
    background-color:greenyellow;
}
.block_3{
    background-color: #f6f676;
}

























































































































